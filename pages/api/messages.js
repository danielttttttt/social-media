// Mock messages storage (in a real app, this would be a database)
let mockMessages = {};

// Mock function to get current user (in real app, this would come from auth)
const getCurrentUser = () => ({
  id: 1,
  name: 'Current User',
  avatar: null
});

export default function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const { conversationId, content } = req.body;
      
      if (!conversationId || !content) {
        return res.status(400).json({ error: 'Missing required fields' });
      }

      if (!content.trim()) {
        return res.status(400).json({ error: 'Message content cannot be empty' });
      }

      const currentUser = getCurrentUser();
      
      // Create new message
      const newMessage = {
        id: Date.now(), // In real app, this would be generated by database
        conversationId: parseInt(conversationId),
        content: content.trim(),
        senderId: currentUser.id,
        senderName: currentUser.name,
        senderAvatar: currentUser.avatar,
        timestamp: new Date().toISOString()
      };

      // Store message (in real app, save to database)
      if (!mockMessages[conversationId]) {
        mockMessages[conversationId] = [];
      }
      mockMessages[conversationId].push(newMessage);

      res.status(201).json(newMessage);
    } catch (error) {
      console.error('Error sending message:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).json({ error: 'Method not allowed' });
  }
}